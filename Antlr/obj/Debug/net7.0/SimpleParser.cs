//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\User\Desktop\Antlr\Antlr\Simple.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Antlr {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SimpleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, BooleanLiteral=14, IntegerLiteral=15, 
		StringLiteral=16, WORD=17, EDF=18;
	public const int
		RULE_start = 0, RULE_methodDeclarations = 1, RULE_methodDeclaration = 2, 
		RULE_methodHeader = 3, RULE_methodBody = 4, RULE_statement = 5, RULE_embeddedStatement = 6, 
		RULE_methodName = 7, RULE_localVariableDeclaration = 8, RULE_methodCall = 9, 
		RULE_variableType = 10, RULE_variableName = 11, RULE_variableValue = 12;
	public static readonly string[] ruleNames = {
		"start", "methodDeclarations", "methodDeclaration", "methodHeader", "methodBody", 
		"statement", "embeddedStatement", "methodName", "localVariableDeclaration", 
		"methodCall", "variableType", "variableName", "variableValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'public'", "'static'", "'void'", "'('", "')'", "'{'", "'}'", "';'", 
		"'='", "'int'", "'byte'", "'string'", "'bool'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "BooleanLiteral", "IntegerLiteral", "StringLiteral", "WORD", 
		"EDF"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Simple.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SimpleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public ITerminalNode EDF() { return GetToken(SimpleParser.EDF, 0); }
		public MethodDeclarationsContext methodDeclarations() {
			return GetRuleContext<MethodDeclarationsContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__0) {
				{
				State = 26; methodDeclarations();
				}
			}

			State = 29; Match(EDF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationsContext : ParserRuleContext {
		public MethodDeclarationContext[] methodDeclaration() {
			return GetRuleContexts<MethodDeclarationContext>();
		}
		public MethodDeclarationContext methodDeclaration(int i) {
			return GetRuleContext<MethodDeclarationContext>(i);
		}
		public MethodDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterMethodDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitMethodDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationsContext methodDeclarations() {
		MethodDeclarationsContext _localctx = new MethodDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_methodDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 31; methodDeclaration();
				}
				}
				State = 34;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_methodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; methodHeader();
			State = 37; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodHeaderContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public MethodHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterMethodHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitMethodHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodHeaderContext methodHeader() {
		MethodHeaderContext _localctx = new MethodHeaderContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_methodHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(T__0);
			State = 40; Match(T__1);
			State = 41; Match(T__2);
			State = 42; methodName();
			State = 43; Match(T__3);
			State = 44; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_methodBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(T__5);
			State = 50;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << WORD))) != 0)) {
				{
				{
				State = 47; statement();
				}
				}
				State = 52;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 53; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; embeddedStatement();
			State = 56; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmbeddedStatementContext : ParserRuleContext {
		public EmbeddedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embeddedStatement; } }
	 
		public EmbeddedStatementContext() { }
		public virtual void CopyFrom(EmbeddedStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class A1Context : EmbeddedStatementContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public A1Context(EmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterA1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitA1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitA1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class B1Context : EmbeddedStatementContext {
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public B1Context(EmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterB1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitB1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitB1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmbeddedStatementContext embeddedStatement() {
		EmbeddedStatementContext _localctx = new EmbeddedStatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_embeddedStatement);
		try {
			State = 60;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__9:
			case T__10:
			case T__11:
			case T__12:
				_localctx = new A1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; localVariableDeclaration();
				}
				break;
			case WORD:
				_localctx = new B1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 59; methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(SimpleParser.WORD, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public VariableValueContext variableValue() {
			return GetRuleContext<VariableValueContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; variableType();
			State = 65; variableName();
			State = 68;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__8) {
				{
				State = 66; Match(T__8);
				State = 67; variableValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_methodCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; methodName();
			State = 71; Match(T__3);
			State = 72; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTypeContext : ParserRuleContext {
		public VariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterVariableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitVariableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableTypeContext variableType() {
		VariableTypeContext _localctx = new VariableTypeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_variableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(SimpleParser.WORD, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterVariableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitVariableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableValueContext : ParserRuleContext {
		public VariableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableValue; } }
	 
		public VariableValueContext() { }
		public virtual void CopyFrom(VariableValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PBooleanLiteralContext : VariableValueContext {
		public ITerminalNode BooleanLiteral() { return GetToken(SimpleParser.BooleanLiteral, 0); }
		public PBooleanLiteralContext(VariableValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterPBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitPBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PIntegerLiteralContext : VariableValueContext {
		public ITerminalNode IntegerLiteral() { return GetToken(SimpleParser.IntegerLiteral, 0); }
		public PIntegerLiteralContext(VariableValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterPIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitPIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PStringLiteralContext : VariableValueContext {
		public ITerminalNode StringLiteral() { return GetToken(SimpleParser.StringLiteral, 0); }
		public PStringLiteralContext(VariableValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.EnterPStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleListener typedListener = listener as ISimpleListener;
			if (typedListener != null) typedListener.ExitPStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleVisitor<TResult> typedVisitor = visitor as ISimpleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableValueContext variableValue() {
		VariableValueContext _localctx = new VariableValueContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_variableValue);
		try {
			State = 81;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BooleanLiteral:
				_localctx = new PBooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 78; Match(BooleanLiteral);
				}
				break;
			case IntegerLiteral:
				_localctx = new PIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 79; Match(IntegerLiteral);
				}
				break;
			case StringLiteral:
				_localctx = new PStringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 80; Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x14V\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x3\x2\x5\x2\x1E\n\x2"+
		"\x3\x2\x3\x2\x3\x3\x6\x3#\n\x3\r\x3\xE\x3$\x3\x4\x3\x4\x3\x4\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\a\x6\x33\n\x6\f\x6\xE\x6"+
		"\x36\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x5\b?\n\b\x3\t\x3\t\x3"+
		"\n\x3\n\x3\n\x3\n\x5\nG\n\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3"+
		"\xE\x3\xE\x3\xE\x5\xET\n\xE\x3\xE\x2\x2\x2\xF\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x2\x3\x3\x2\f"+
		"\xFO\x2\x1D\x3\x2\x2\x2\x4\"\x3\x2\x2\x2\x6&\x3\x2\x2\x2\b)\x3\x2\x2\x2"+
		"\n\x30\x3\x2\x2\x2\f\x39\x3\x2\x2\x2\xE>\x3\x2\x2\x2\x10@\x3\x2\x2\x2"+
		"\x12\x42\x3\x2\x2\x2\x14H\x3\x2\x2\x2\x16L\x3\x2\x2\x2\x18N\x3\x2\x2\x2"+
		"\x1AS\x3\x2\x2\x2\x1C\x1E\x5\x4\x3\x2\x1D\x1C\x3\x2\x2\x2\x1D\x1E\x3\x2"+
		"\x2\x2\x1E\x1F\x3\x2\x2\x2\x1F \a\x14\x2\x2 \x3\x3\x2\x2\x2!#\x5\x6\x4"+
		"\x2\"!\x3\x2\x2\x2#$\x3\x2\x2\x2$\"\x3\x2\x2\x2$%\x3\x2\x2\x2%\x5\x3\x2"+
		"\x2\x2&\'\x5\b\x5\x2\'(\x5\n\x6\x2(\a\x3\x2\x2\x2)*\a\x3\x2\x2*+\a\x4"+
		"\x2\x2+,\a\x5\x2\x2,-\x5\x10\t\x2-.\a\x6\x2\x2./\a\a\x2\x2/\t\x3\x2\x2"+
		"\x2\x30\x34\a\b\x2\x2\x31\x33\x5\f\a\x2\x32\x31\x3\x2\x2\x2\x33\x36\x3"+
		"\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x37\x3\x2\x2\x2"+
		"\x36\x34\x3\x2\x2\x2\x37\x38\a\t\x2\x2\x38\v\x3\x2\x2\x2\x39:\x5\xE\b"+
		"\x2:;\a\n\x2\x2;\r\x3\x2\x2\x2<?\x5\x12\n\x2=?\x5\x14\v\x2><\x3\x2\x2"+
		"\x2>=\x3\x2\x2\x2?\xF\x3\x2\x2\x2@\x41\a\x13\x2\x2\x41\x11\x3\x2\x2\x2"+
		"\x42\x43\x5\x16\f\x2\x43\x46\x5\x18\r\x2\x44\x45\a\v\x2\x2\x45G\x5\x1A"+
		"\xE\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2G\x13\x3\x2\x2\x2HI\x5\x10"+
		"\t\x2IJ\a\x6\x2\x2JK\a\a\x2\x2K\x15\x3\x2\x2\x2LM\t\x2\x2\x2M\x17\x3\x2"+
		"\x2\x2NO\a\x13\x2\x2O\x19\x3\x2\x2\x2PT\a\x10\x2\x2QT\a\x11\x2\x2RT\a"+
		"\x12\x2\x2SP\x3\x2\x2\x2SQ\x3\x2\x2\x2SR\x3\x2\x2\x2T\x1B\x3\x2\x2\x2"+
		"\b\x1D$\x34>\x46S";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Antlr
