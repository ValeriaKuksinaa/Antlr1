//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\User\Desktop\Antlr\Antlr\Simple.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Antlr {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SimpleLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, BooleanLiteral=14, IntegerLiteral=15, 
		StringLiteral=16, WORD=17;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "BooleanLiteral", "IntegerLiteral", 
		"StringLiteral", "WORD"
	};


	public SimpleLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'public'", "'static'", "'void'", "'('", "')'", "'{'", "'}'", "';'", 
		"'='", "'int'", "'byte'", "'string'", "'bool'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "BooleanLiteral", "IntegerLiteral", "StringLiteral", "WORD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Simple.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x13w\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n"+
		"\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x63\n\xF\x3\x10\x6\x10\x66\n\x10\r\x10"+
		"\xE\x10g\x3\x11\x3\x11\a\x11l\n\x11\f\x11\xE\x11o\v\x11\x3\x11\x3\x11"+
		"\x3\x12\x6\x12t\n\x12\r\x12\xE\x12u\x3m\x2\x2\x13\x3\x2\x3\x5\x2\x4\a"+
		"\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2"+
		"\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13\x3\x2\x4"+
		"\x3\x2\x63|\x4\x2\x43\\\x63|z\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a"+
		"\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF"+
		"\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2"+
		"\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2"+
		"\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x3%\x3\x2\x2"+
		"\x2\x5,\x3\x2\x2\x2\a\x33\x3\x2\x2\x2\t\x38\x3\x2\x2\x2\v:\x3\x2\x2\x2"+
		"\r<\x3\x2\x2\x2\xF>\x3\x2\x2\x2\x11@\x3\x2\x2\x2\x13\x42\x3\x2\x2\x2\x15"+
		"\x44\x3\x2\x2\x2\x17H\x3\x2\x2\x2\x19M\x3\x2\x2\x2\x1BT\x3\x2\x2\x2\x1D"+
		"\x62\x3\x2\x2\x2\x1F\x65\x3\x2\x2\x2!i\x3\x2\x2\x2#s\x3\x2\x2\x2%&\ar"+
		"\x2\x2&\'\aw\x2\x2\'(\a\x64\x2\x2()\an\x2\x2)*\ak\x2\x2*+\a\x65\x2\x2"+
		"+\x4\x3\x2\x2\x2,-\au\x2\x2-.\av\x2\x2./\a\x63\x2\x2/\x30\av\x2\x2\x30"+
		"\x31\ak\x2\x2\x31\x32\a\x65\x2\x2\x32\x6\x3\x2\x2\x2\x33\x34\ax\x2\x2"+
		"\x34\x35\aq\x2\x2\x35\x36\ak\x2\x2\x36\x37\a\x66\x2\x2\x37\b\x3\x2\x2"+
		"\x2\x38\x39\a*\x2\x2\x39\n\x3\x2\x2\x2:;\a+\x2\x2;\f\x3\x2\x2\x2<=\a}"+
		"\x2\x2=\xE\x3\x2\x2\x2>?\a\x7F\x2\x2?\x10\x3\x2\x2\x2@\x41\a=\x2\x2\x41"+
		"\x12\x3\x2\x2\x2\x42\x43\a?\x2\x2\x43\x14\x3\x2\x2\x2\x44\x45\ak\x2\x2"+
		"\x45\x46\ap\x2\x2\x46G\av\x2\x2G\x16\x3\x2\x2\x2HI\a\x64\x2\x2IJ\a{\x2"+
		"\x2JK\av\x2\x2KL\ag\x2\x2L\x18\x3\x2\x2\x2MN\au\x2\x2NO\av\x2\x2OP\at"+
		"\x2\x2PQ\ak\x2\x2QR\ap\x2\x2RS\ai\x2\x2S\x1A\x3\x2\x2\x2TU\a\x64\x2\x2"+
		"UV\aq\x2\x2VW\aq\x2\x2WX\an\x2\x2X\x1C\x3\x2\x2\x2YZ\av\x2\x2Z[\at\x2"+
		"\x2[\\\aw\x2\x2\\\x63\ag\x2\x2]^\ah\x2\x2^_\a\x63\x2\x2_`\an\x2\x2`\x61"+
		"\au\x2\x2\x61\x63\ag\x2\x2\x62Y\x3\x2\x2\x2\x62]\x3\x2\x2\x2\x63\x1E\x3"+
		"\x2\x2\x2\x64\x66\t\x2\x2\x2\x65\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2g\x65"+
		"\x3\x2\x2\x2gh\x3\x2\x2\x2h \x3\x2\x2\x2im\a$\x2\x2jl\v\x2\x2\x2kj\x3"+
		"\x2\x2\x2lo\x3\x2\x2\x2mn\x3\x2\x2\x2mk\x3\x2\x2\x2np\x3\x2\x2\x2om\x3"+
		"\x2\x2\x2pq\a$\x2\x2q\"\x3\x2\x2\x2rt\t\x3\x2\x2sr\x3\x2\x2\x2tu\x3\x2"+
		"\x2\x2us\x3\x2\x2\x2uv\x3\x2\x2\x2v$\x3\x2\x2\x2\a\x2\x62gmu\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Antlr
